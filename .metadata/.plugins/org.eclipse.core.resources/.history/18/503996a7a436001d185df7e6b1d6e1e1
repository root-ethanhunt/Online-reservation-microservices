package com.Booking.Bookingservice.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.Booking.Bookingservice.models.Booking;
import com.Booking.Bookingservice.models.BookingDetails;
import com.Booking.Bookingservice.models.Train;
import com.Booking.Bookingservice.repository.BookingDetailsRepository;
import com.Booking.Bookingservice.repository.BookingInfoRepository;
import com.Booking.Bookingservice.repository.BookingRepository;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("Booking")
public class BookingController {
	@Autowired
	private BookingRepository repository;
	
	@Autowired
	private BookingDetailsRepository repository1;
	
	@Autowired
	private BookingInfoRepository repository2;
	
//	@Autowired
//	private Train t;
	
//	RestTemplate restTemplate = new RestTemplate();
	
	@PostMapping("/addBooking/")
	public String saveBooking(@RequestBody Booking book) {
		
		String order_id=book.getBookingId();
		
		
//		RestTemplate restTemplate = new RestTemplate();
//		
//		MultiValueMap<String, String> parametersMap = new LinkedMultiValueMap<String, String>();
//		parametersMap.add("CUST_ID", book.getUser().getId());
//		parametersMap.add("TXN_AMOUNT", book.getPrice());
//		parametersMap.add("ORDER_ID",order_id );
//		
//		ModelAndView Payment =  restTemplate.postForObject("http://localhost:9009/pgredirect",parametersMap,ModelAndView.class );
//		
	    repository2.save(book.getBookingDetails());
	    
	    for(BookingDetails i:book.getPassengerList()) {
	      repository1.save(i);
	    }
		repository.save(book);
		return "Added booking details";
	}
	
	
	@PostMapping("/home")
	public String Test(@RequestBody String book) {
		return book;
	}
	
	
	
	@GetMapping("/findTrain/{name}")
	public Train[] getBooking(@PathVariable("name") String name) {
		RestTemplate restTemplate = new RestTemplate();
		
		Train[] train =  restTemplate.getForObject("http://localhost:9002/trainSearch/findByTrainName/"+name, Train[].class);
		return  train;
	}
	
	@GetMapping("/allBookingsWithofUsers/{id}")
	public List<Booking> getByUserId(@PathVariable("id") String id) {
		Query query = new Query();
		query.addCriteria(Criteria.where("userId").regex(id));
		
		 List<Booking> book = repository.find(query,Booking.class);
		 return book ;
	}
	
	@GetMapping("/showTicket/{pnr}")
	public Booking getBookedTicket(@PathVariable("pnr") int pnr) {
		
		return null;
	}
	
//	
//	@GetMapping("/findAllUsers")
//	public List<Passenger> getAllUsers(@RequestBody Passenger user) {
//		List<Passenger> allUsers =repository.findAll();
//		return allUsers;
//	}
//	
//	@GetMapping("/findAllUser/{id}")
//	public Optional<Passenger> getAllUser(@PathVariable int id) {
//		return repository.findById(id);
//	}
//	
//	@DeleteMapping("/delete/{id}")
//	public String deleteUser(@PathVariable int id) {
//		 repository.deleteById(id);
//		 return "Passenger deleted with id :"+id;
//	}
}
